{"version":3,"sources":["components/chart-ph.js","components/value-ph.js","App.js","serviceWorker.js","index.js"],"names":["ChartPh","_this","this","duration","props","refresh","dataHistorical","react_default","a","createElement","es","data","datasets","label","pointRadius","borderColor","backgroundColor","lineTension","options","maintainAspectRatio","legend","display","scales","yAxes","ticks","xAxes","type","realtime","delay","pause","onRefresh","chart","x","dataRealTime","y","forEach","dataset","push","Component","ValuePh","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","setState","_this2","timerID","setInterval","updateValue","serverUrl","process","socket","openSocket","on","message","timestamp","style","height","width","position","content","padding","charts","name","durationMs","sampleRateMs","App","loading","serverError","keyMap","_","filter","n","moment","isAfter","subtract","sortBy","sampleTimestamp","isSameOrAfter","map","obj","mapKeys","key","axios","get","then","response","length","parseChartData","catch","error","console","log","react_spinners","color","chartHtml","chart_ph","value_ph","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51261681.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-plugin-streaming';\n\nclass ChartPh extends Component {\n\n  render() {\n    const _this = this\n    const duration = this.props.duration\n    const refresh = this.props.refresh\n    const dataHistorical = this.props.dataHistorical\n\n    var getLatestData = function() {\n      var data = {\n        x: _this.props.dataRealTime.x,\n        y: _this.props.dataRealTime.y\n      }\n      return data\n    }\n\n    return (\n          <Line\n            data={{\n              datasets: [{\n                data: dataHistorical,\n                label: 'PH',\n                pointRadius: 1,\n                borderColor: 'rgb(255, 99, 132)',\n                backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                lineTension: 0,\n                // borderDash: [8, 4]\n              }]\n            }}\n            options={{\n              maintainAspectRatio: false,\n              legend: {\n                display: false\n              },\n              scales: {\n                yAxes: [{\n                  ticks: {\n                    // suggestedMin: 4,\n                    // suggestedMax: 10\n                  }\n                }],\n                xAxes: [{\n                  type: 'realtime',\n                  realtime: {\n                    duration: duration,\n                    delay: 2000,\n                    refresh: refresh,\n                    pause: false,\n                    onRefresh: function(chart) {\n                      var data = getLatestData()\n                      chart.data.datasets.forEach(function(dataset) {\n                        dataset.data.push(data)\n                      })\n                    },\n                    \n                  }\n                }]\n              }\n            }}\n            />\n    );\n  }\n}\n\nexport default ChartPh;\n","import React, { Component } from 'react';\n\nclass ValuePh extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: null\n    }\n  }\n\n  updateValue() {\n    this.setState((state, props) => ({\n      value: props.dataRealTime.y\n    }))\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.updateValue(),\n      1000\n    )\n  }\n\n  render() {\n\n    var value = this.state.value || 'unknown'\n\n    return (\n        <div>\n          {value}\n        </div>\n    );\n  }\n}\n\nexport default ValuePh;\n","import React, { Component } from 'react';\nimport openSocket from 'socket.io-client';\nimport axios from 'axios'\nimport { MoonLoader } from 'react-spinners'\nimport _ from \"lodash\"\nimport * as moment from 'moment'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport ChartPh from './components/chart-ph';\nimport ValuePh from './components/value-ph';\n\nconst serverUrl = process.env.REACT_APP_SERVER_URL\n\nconst socket = openSocket(serverUrl)\nsocket.on('connect', function () { \n  // console.log('[socket]: connected')\n})\n\nsocket.on('data-update-ph', function (message) { \n  dataRealTime.y = message.value\n  dataRealTime.x = message.timestamp\n})\n\nconst style = {\n  chart: {\n    height: '200px',\n    width: 'auto',\n    position: 'relative'\n  },\n  content: {\n    width: '80%',\n    padding: 20\n  }\n}\n\nconst charts = [\n  {\n    name: 'Last Minute',\n    durationMs: 60000,\n    sampleRateMs: 500,\n    dataHistorical: []\n  },\n  {\n    name: 'Last 2 Hours',\n    durationMs: 7200000,\n    sampleRateMs: 30000,\n    dataHistorical: []\n  },\n  {\n    name: 'Last 24 Hours',\n    durationMs: 86400000,\n    sampleRateMs: 300000,\n    dataHistorical: []\n  }\n]\nvar dataRealTime = {}\n\nclass App extends Component {\n\n  parseChartData(chart, data) {\n    const keyMap = {\n      value: 'y',\n      timestamp: 'x'\n    }\n    // filter & sort by duration\n    chart.dataHistorical = _.filter(data, function(n) {\n      return moment(n.timestamp).isAfter(moment().subtract(chart.durationMs, 'milliseconds'))\n    })\n    chart.dataHistorical = _.sortBy(chart.dataHistorical, ['timestamp'])\n    // sample\n    var sampleTimestamp = chart.dataHistorical[0].timestamp\n    chart.dataHistorical = _.filter(chart.dataHistorical, function(n) {\n      if (moment(n.timestamp).isSameOrAfter(moment(sampleTimestamp))) {\n        sampleTimestamp += chart.sampleRateMs\n        return true\n      }\n      else return false\n    })\n    // map keys so it can be rendered in chart\n    chart.dataHistorical = chart.dataHistorical.map(function(obj) {\n      return _.mapKeys(obj, function(value, key) {\n        return keyMap[key];\n      });\n    })\n    return chart\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      serverError: false\n    }\n  }\n\n  componentDidMount() {\n    const _this = this\n    axios.get(serverUrl + '/historicals/ph')\n      .then(function (response) {\n        const data = response.data\n        // if no data\n        if (!data) { }\n        else if (data.length === 0) { }\n        else {\n          charts.forEach(function(chart) {\n            chart = _this.parseChartData(chart, data)\n          })\n        }\n        return _this.setState({loading:false})\n      })\n      .catch(function (error) {\n        console.log(error)\n        _this.setState({serverError:true})\n        return _this.setState({loading:false})\n      })\n  }\n\n  render() {\n    let content\n    if (this.state.loading === true) {\n      content = <div>\n                  <MoonLoader\n                    color={'#36D7B7'}\n                    />\n                </div>\n    }\n    else if (this.state.serverError === true) {\n      content = <div>\n                  Server Unreachable\n                  <br/>\n                  <br/>\n                  Try Reloading App\n                </div>\n    }\n    else {\n      let chartHtml = charts.map((chart) =>\n        <div key={chart.name}>\n          <h6>{chart.name}</h6>\n          <div style={style.chart}>\n            <ChartPh \n              dataHistorical={chart.dataHistorical}\n              dataRealTime={dataRealTime} \n              duration={chart.durationMs} \n              refresh={chart.sampleRateMs}/>\n          </div>\n        </div>\n      )\n      content = <div style={style.content}>\n        <h2>PH</h2>\n        <ValuePh dataRealTime={dataRealTime}/>\n        {chartHtml}\n      </div>\n    }\n\n    return (\n      <div className=\"App\">\n        <main className=\"App-main\">\n          {content}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}