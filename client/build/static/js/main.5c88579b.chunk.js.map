{"version":3,"sources":["components/chart-ph.js","components/value-ph.js","App.js","serviceWorker.js","index.js"],"names":["ChartPh","_this","this","duration","props","react_default","a","createElement","es","data","datasets","label","borderColor","backgroundColor","lineTension","options","legend","display","scales","yAxes","ticks","min","max","xAxes","type","realtime","delay","refresh","pause","onRefresh","chart","x","y","forEach","dataset","push","Component","ValuePh","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","setState","_this2","timerID","setInterval","updateValue","socket","openSocket","on","console","log","message","timestamp","App","className","value_ph","chart_ph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAiEeA,2LAzDX,IAAMC,EAAQC,KACRC,EAAWD,KAAKE,MAAMD,SAU5B,OACME,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,KAAM,CACJC,SAAU,CAAC,CACTD,KAAM,GACNE,MAAO,KACPC,YAAa,oBACbC,gBAAiB,0BACjBC,YAAa,KAIjBC,QAAS,CACPC,OAAQ,CACNC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CAAC,CACNC,MAAO,CACLC,IAAK,EACLC,IAAK,MAGTC,MAAO,CAAC,CACNC,KAAM,WACNC,SAAU,CACRtB,SAAUA,EACVuB,MAAO,IACPC,QAAS,IACTC,OAAO,EACPC,UAAW,SAASC,GAClB,IAAIrB,EAtCT,CACTsB,EAAG9B,EAAMG,MAAMK,KAAKsB,EACpBC,EAAG/B,EAAMG,MAAMK,KAAKuB,GAqCNF,EAAMrB,KAAKC,SAASuB,QAAQ,SAASC,GACnCA,EAAQzB,KAAK0B,KAAK1B,oBA/CpB2B,cC4BPC,cA7Bb,SAAAA,EAAYjC,GAAO,IAAAH,EAAA,OAAAqC,OAAAC,EAAA,EAAAD,CAAApC,KAAAmC,IACjBpC,EAAAqC,OAAAE,EAAA,EAAAF,CAAApC,KAAAoC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxC,KAAME,KACDuC,MAAQ,CACXC,MAAO,OAHQ3C,6EAQjBC,KAAK2C,SAAS,SAACF,EAAOvC,GAAR,MAAmB,CAC/BwC,MAAOxC,EAAMK,KAAKuB,iDAIF,IAAAc,EAAA5C,KAClBA,KAAK6C,QAAUC,YACb,kBAAMF,EAAKG,eACX,sCAKF,OACI5C,EAAAC,EAAAC,cAAA,WACGL,KAAKyC,MAAMC,cAzBAR,aCOhBc,EAASC,IAAW,2CAGtB1C,EAAO,GAEXyC,EAAOE,GAAG,UAAW,WACnBC,QAAQC,IAAI,yBAGdJ,EAAOE,GAAG,iBAAkB,SAAUG,GAEpC9C,EAAKuB,EAAIuB,EAAQX,MACjBnC,EAAKsB,EAAIwB,EAAQC,gBAqBJC,mLAhBX,OACEpD,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,OACbrD,EAAAC,EAAAC,cAAA,UAAQmD,UAAU,cAEhBrD,EAAAC,EAAAC,cAACoD,EAAD,CAASlD,KAAMA,IACfJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqD,EAAD,CAASnD,KAAMA,EAAMN,SAAU,MAC/BE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqD,EAAD,CAASnD,KAAMA,EAAMN,SAAU,eAVvBiC,aCZEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c88579b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-plugin-streaming';\n\nclass ChartPh extends Component {\n\n  render() {\n    const _this = this\n    const duration = this.props.duration\n\n    var getLatestData = function() {\n      var data = {\n        x: _this.props.data.x,\n        y: _this.props.data.y\n      }\n      return data\n    }\n\n    return (\n          <Line\n            data={{\n              datasets: [{\n                data: [],\n                label: 'PH',\n                borderColor: 'rgb(255, 99, 132)',\n                backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                lineTension: 0,\n                // borderDash: [8, 4]\n              }]\n            }}\n            options={{\n              legend: {\n                display: false\n              },\n              scales: {\n                yAxes: [{\n                  ticks: {\n                    min: 0,\n                    max: 14\n                  }\n                }],\n                xAxes: [{\n                  type: 'realtime',\n                  realtime: {\n                    duration: duration,\n                    delay: 2000,\n                    refresh: 1000,\n                    pause: false,\n                    onRefresh: function(chart) {\n                      var data = getLatestData()\n                      chart.data.datasets.forEach(function(dataset) {\n                        dataset.data.push(data)\n                      })\n                    },\n                    \n                  }\n                }]\n              }\n            }}\n            />\n    );\n  }\n}\n\nexport default ChartPh;\n","import React, { Component } from 'react';\n\nclass ValuePh extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: 'N/A'\n    }\n  }\n\n  updateValue() {\n    this.setState((state, props) => ({\n      value: props.data.y\n    }))\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.updateValue(),\n      1000\n    )\n  }\n\n  render() {\n    return (\n        <div>\n          {this.state.value}\n        </div>\n    );\n  }\n}\n\nexport default ValuePh;\n","import React, { Component } from 'react';\nimport openSocket from 'socket.io-client';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport ChartPh from './components/chart-ph';\nimport ValuePh from './components/value-ph';\n\nconst socket = openSocket('https://beer-tech-web-qa.herokuapp.com/')\n// const socket = openSocket('http://localhost:3001')\n\nvar data = {}\n\nsocket.on('connect', function () { \n  console.log('[socket]: connected')\n})\n\nsocket.on('data-update-ph', function (message) { \n  // console.log('[socket] data-update-ph: ', message)\n  data.y = message.value\n  data.x = message.timestamp\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <ValuePh data={data}/>\n          <br/>\n          <ChartPh data={data} duration={20000}/>\n          <br/>\n          <ChartPh data={data} duration={1000000}/>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}