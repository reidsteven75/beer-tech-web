{"version":3,"sources":["components/chart-sensor.js","components/value-sensor.js","components/help.js","App.js","serviceWorker.js","index.js"],"names":["style","title","color","fontSize","marginBottom","loader","position","top","left","transform","wrapper","border","height","width","padding","paddingBottom","ChartSensor","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","error","_this","assertThisInitialized","setInterval","checkLoaded","isLoading","setState","duration","refresh","dataHistorical","react_default","a","createElement","react_spinners","size","chart","es","data","datasets","label","pointRadius","borderColor","backgroundColor","lineTension","options","maintainAspectRatio","legend","display","scales","yAxes","ticks","xAxes","type","realtime","delay","pause","onRefresh","x","dataRealTime","y","forEach","dataset","push","Component","ValuePh","value","timerID","updateValue","buttonClose","margin","Help","handleClickOpen","open","handleClose","scroll","Button_default","variant","onClick","bind","Dialog_default","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","DialogActions_default","serverUrl","process","theme","createMuiTheme","palette","primary","light","cyan","main","dark","secondary","red","typography","useNextVariants","socket","openSocket","on","message","sensor","ph","timestamp","temp","content","charts","name","durationMs","sampleRateMs","App","serverError","keyMap","map","obj","_","mapKeys","key","axios","get","then","response","length","mapChartData","catch","console","log","err","setTimeout","getChartData","res","updateData","isError","chartPhHtml","chart_sensor","chartTempHtml","Container","Row","Col","sm","value_sensor","help","styles","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfaf0653.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { Line } from 'react-chartjs-2'\nimport 'chartjs-plugin-streaming'\nimport { MoonLoader } from 'react-spinners'\n\nconst style = {\n  title: {\n    color: 'white',\n    fontSize: '16px',\n    marginBottom: '15px'\n  },\n  loader: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)'\n  },\n  wrapper: {\n    border: '1px solid black',\n    height: '240px',\n    width: 'auto',\n    position: 'relative',\n    padding: '15px',\n    paddingBottom: '40px',\n    marginBottom: '20px'\n  }\n}\n\nclass ChartSensor extends Component {\n\n  checkLoaded() {\n    if (this.props.isLoading === false) {\n      this.setState({loading:false})\n    }\n  }\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      error: false\n    }\n\n    const _this = this  \n    setInterval(function() {\n      _this.checkLoaded()\n    }, 1000)\n  }\n\n  render() {\n    const _this = this\n    const duration = this.props.duration\n    const refresh = this.props.refresh\n    const dataHistorical = this.props.dataHistorical\n\n    var getLatestData = function() {\n      var data = {\n        x: _this.props.dataRealTime.x,\n        y: _this.props.dataRealTime.y\n      }\n      return data\n    }\n\n    let loading = \n        <div style={style.loader}>\n          <MoonLoader\n            size={30}\n            color={'#36D7B7'}\n            />\n        </div>\n      \n    let chart = \n      <Line\n        data={{\n          datasets: [{\n            data: dataHistorical,\n            label: 'PH',\n            pointRadius: 1,\n            borderColor: this.props.borderColor,\n            backgroundColor: this.props.backgroundColor,\n            lineTension: 0,\n            // borderDash: [8, 4]\n          }]\n        }}\n        options={{\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                // suggestedMin: 4,\n                // suggestedMax: 10\n              }\n            }],\n            xAxes: [{\n              type: 'realtime',\n              realtime: {\n                duration: duration,\n                delay: 2000,\n                refresh: refresh,\n                pause: false,\n                onRefresh: function(chart) {\n                  var data = getLatestData()\n                  chart.data.datasets.forEach(function(dataset) {\n                    dataset.data.push(data)\n                  })\n                },\n                \n              }\n            }]\n          }\n        }}\n      />\n\n    return (\n      <div style={style.wrapper}>\n        <div style={style.title}>{this.props.title}</div>\n        {\n          this.state.loading\n          ? (\n            loading\n          )\n          : (\n            chart\n          )\n          \n        }\n      </div>\n          \n    );\n  }\n}\n\nexport default ChartSensor;\n","import React, { Component } from 'react'\n\nclass ValuePh extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: null\n    }\n  }\n\n  updateValue() {\n    this.setState((state, props) => ({\n      value: props.dataRealTime.y\n    }))\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.updateValue(),\n      1000\n    )\n  }\n\n  render() {\n\n    var value = this.state.value || 'unknown'\n\n    return (\n        <div>\n          {value}\n        </div>\n    );\n  }\n}\n\nexport default ValuePh;\n","import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nconst style = {\n\tbuttonClose: {\n\t\tmargin: 'auto',\n\t\tpadding: '15px'\n\t}\n}\n\nclass Help extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n\t\t\topen: false,\n\t\t\tscroll: 'paper'\n    }\n\t}\n\t\n\thandleClickOpen = function() {\n    this.setState({ open: true });\n  }\n\n  handleClose = function() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    return (\n      <div>\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={this.handleClickOpen.bind(this)}\n\t\t\t\t>\n\t\t\t\t\tHelp\n\t\t\t\t</Button>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose.bind(this)}\n          scroll={this.state.scroll}\n          aria-labelledby=\"scroll-dialog-title\"\n        >\n          <DialogTitle id=\"scroll-dialog-title\">Help</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <h4>Connecting to Wifi</h4>\n\t\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t\t<li>On mobile device or computer connect to wifi “Wifi Connect”</li>\n\t\t\t\t\t\t\t\t\t<li>You should be auto-redirected to wifi setup</li>\n\t\t\t\t\t\t\t\t\t<li>Choose wifi network and enter password</li>\n\t\t\t\t\t\t\t\t\t<li>Device will try to connect. If it’s successful you won’t see the “Wifi Connect” network anymore, and the device will be ready to use</li>\n\t\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t<h4>Readings Are Innacurate and Jumping All Over The Place</h4>\n\t\t\t\t\t\t\tDisconnect & reconnect the usb cable that's accessable from the top of the larger computer\n\t\t\t\t\t\t\t<h4>Ensuring Accurate Readings</h4>\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t<li>READINGS WILL BE SUPER RANDOM IF THE SENSOR BOX IS MOVED</li>\n\t\t\t\t\t\t\t\t\t<li>Electrode reference solution is the 3NKCL solution</li>\n\t\t\t\t\t\t\t\t\t<li>The electrode used for the first or long set without re-use, the electrode bulb and the sand core, immersed in the 3NKCL solution activated eight hours</li>\n\t\t\t\t\t\t\t\t\t<li>The electrode plug should be kept clean and dry</li>\n\t\t\t\t\t\t\t\t\t<li>Measurement should be avoided staggered pollution between solutions, so as not to affect the accuracy of measurement</li>\n\t\t\t\t\t\t\t\t\t<li>The electrode should not be long-term immersed in acid chloride solution</li>\n\t\t\t\t\t\t\t\t\t<li>Electrode when in use, the ceramic sand core and liquid outlet rubber ring should be removed, in order to make salt bridge solution to maintain a certain velocity</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<h4>PH Sensor</h4>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li>Model: SEN0169</li>\n\t\t\t\t\t\t\t\t<li>Measuring Range: 0-14PH</li>\t\n\t\t\t\t\t\t\t\t<li>Measuring Temperature: 0-60 C</li>\t\n\t\t\t\t\t\t\t\t<li>Accuracy: ± 0.2pH @ 25 C</li>\t\n\t\t\t\t\t\t\t</ul>\n\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions style={style.buttonClose}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\tonClick={this.handleClose.bind(this)} \n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t</Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n\t\t)\n\t}\n}\n\nexport default Help\n","import React, { Component } from 'react'\nimport openSocket from 'socket.io-client'\nimport axios from 'axios'\nimport { MoonLoader } from 'react-spinners'\nimport _ from 'lodash'\nimport { Container, Row, Col } from 'react-bootstrap'\n// import * as moment from 'moment'\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport cyan from '@material-ui/core/colors/cyan'\nimport red from '@material-ui/core/colors/red'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport ChartSensor from './components/chart-sensor'\nimport ValueSensor from './components/value-sensor'\nimport Help from './components/help'\n// import { SlowBuffer } from 'buffer';\n\nconst serverUrl = process.env.REACT_APP_SERVER_URL\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: cyan[300],\n      main: cyan[500],\n      dark: cyan[700],\n    },\n    secondary: {\n      light: red[300],\n      main: red[500],\n      dark: red[700],\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  }\n})\n\nconst socket = openSocket(serverUrl)\nsocket.on('connect', function () { \n  // console.log('[socket]: connected')\n})\n\nsocket.on('data-update', function (message) { \n  if (message.sensor === \"PH\") {\n    dataRealTime.ph.y = message.value\n    dataRealTime.ph.x = message.timestamp\n  }\n  else if (message.sensor === \"TEMP\") {\n    dataRealTime.temp.y = message.value\n    dataRealTime.temp.x = message.timestamp\n  }\n})\n\nconst style = {\n  content: {\n    width: '80%',\n    padding: 20\n  }\n}\n\nconst charts = {\n  ph: [\n    {\n      name: 'Last Minute',\n      durationMs: 60000,\n      sampleRateMs: 500,\n      dataHistorical: []\n    },\n    {\n      name: 'Last 2 Hours',\n      durationMs: 7200000,\n      sampleRateMs: 30000,\n      dataHistorical: []\n    },\n    {\n      name: 'Last 24 Hours',\n      durationMs: 86400000,\n      sampleRateMs: 300000,\n      dataHistorical: []\n    }\n  ],\n  temp: [\n    {\n      name: 'Last Minute',\n      durationMs: 60000,\n      sampleRateMs: 500,\n      dataHistorical: []\n    },\n    {\n      name: 'Last 2 Hours',\n      durationMs: 7200000,\n      sampleRateMs: 30000,\n      dataHistorical: []\n    },\n    {\n      name: 'Last 24 Hours',\n      durationMs: 86400000,\n      sampleRateMs: 300000,\n      dataHistorical: []\n    }\n  ]\n}\nvar dataRealTime = {\n  ph: {},\n  temp: {}\n}\n\nclass App extends Component {\n\n  mapChartData(chart) {\n    const keyMap = {\n      value: 'y',\n      timestamp: 'x'\n    }\n    // map keys so it can be rendered in chart\n    chart.dataHistorical = chart.dataHistorical.map(function(obj) {\n      return _.mapKeys(obj, function(value, key) {\n        return keyMap[key];\n      });\n    })\n    return chart\n  }\n\n  getChartData(chart, sensor) {\n    const _this = this\n    return axios.get(serverUrl + '/historicals?sensor=' + sensor + '&duration=' + chart.durationMs + '&samplerate=' + chart.sampleRateMs)\n      .then(function (response) {\n        if (!response.data) { }\n        else if (response.data.length === 0) { }\n        else {\n          chart.dataHistorical = response.data\n          chart = _this.mapChartData(chart)\n        }\n        return ({chart:chart})\n      })\n      .catch(function (error) {\n        console.log({err:error})\n        return error\n      })\n\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      serverError: false\n    }\n  }\n\n  componentDidMount() {\n    const _this = this\n\n    // App loading animation\n    setTimeout(function() {\n      _this.setState({loading:false})\n\n      charts.ph.forEach(function(chart) {\n        chart.isLoading = true\n        _this.getChartData(chart, 'ph').then(function(res) {\n          chart.isLoading = false\n          _this.setState({updateData:true})\n          if (res.err) { chart.isError = true }\n          else { chart = res.chart }\n        })\n      })\n\n      charts.temp.forEach(function(chart) {\n        chart.isLoading = true\n        _this.getChartData(chart, 'temp').then(function(res) {\n          chart.isLoading = false\n          _this.setState({updateData:true})\n          if (res.err) { chart.isError = true }\n          else { chart = res.chart }\n        })\n      })\n    }, 1000)\n  }\n\n  render() {\n    let content\n    if (this.state.loading === true) {\n      content = <div>\n                  <MoonLoader\n                    color={'#36D7B7'}\n                    />\n                </div>\n    }\n    else if (this.state.serverError === true) {\n      content = <div>\n                  Server Unreachable\n                  <br/>\n                  <br/>\n                  Try Reloading App\n                </div>\n    }\n    else {\n      let chartPhHtml = charts.ph.map((chart) =>\n        <div key={chart.name}>\n          <ChartSensor \n            isLoading={chart.isLoading}\n            isError={chart.isError}\n            title={chart.name}\n            borderColor={'rgb(255, 99, 132)'}\n            backgroundColor={'rgba(255, 99, 132, 0.5)'}\n            dataHistorical={chart.dataHistorical}\n            dataRealTime={dataRealTime.ph} \n            duration={chart.durationMs} \n            refresh={chart.sampleRateMs}/>\n        </div>    \n      )\n      let chartTempHtml = charts.temp.map((chart) =>\n        <div key={chart.name}>\n          <ChartSensor \n            isLoading={chart.isLoading}\n            isError={chart.isError}\n            title={chart.name}\n            borderColor={'rgb(152, 255, 152)'}\n            backgroundColor={'rgba(152, 255, 152, 0.5)'}\n            dataHistorical={chart.dataHistorical}\n            dataRealTime={dataRealTime.temp} \n            duration={chart.durationMs} \n            refresh={chart.sampleRateMs}/>\n        </div>    \n      )\n      content = <div style={style.content}>\n      <Container>\n        <Row>\n          <Col sm={6}>\n            <h2>PH</h2>\n            <ValueSensor dataRealTime={dataRealTime.ph}/>\n            <br/>\n            {chartPhHtml}\n          </Col>\n          <Col sm={6}>\n            <h2>TEMP</h2>\n            <ValueSensor dataRealTime={dataRealTime.temp}/>\n            <br/>\n            {chartTempHtml}\n          </Col>\n        </Row>\n      </Container>       \n        <br/>\n        <Help/>\n        <br/>\n      </div>\n    }\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className=\"App\">\n          <main className=\"App-main\">\n            {content}\n          </main>\n        </div> \n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}